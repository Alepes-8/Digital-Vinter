

/** Get weather data from accident
 *  Send the data to graph.js to generate graphs
 * @param {*} county_no county number
 * @param {*} start_time start time to get data from
 * @param {*} stop_time stop time to get data from
 */
async function getAccidentWeather(county_no, start_time, stop_time) {
    writeLog("Started...");
    await $.getJSON("/api/getAccidentId", {county_no, start_time, stop_time}, function(accidentID){
        writeLog(accidentID);
	var accidentData = [];
	for(let i = 0; i < accidentID.length; i++){
	    accidentRow = getWeather(accidentID);
	    accidentData.push(accidentRow);
	}
	writelog(accidentData);
	// Graf funktioner för att sätta in data
    });
}

async function getWeather(accidentID) {
    await $.getJSON("/api/getAccidentWeather", {accidentID}, function(accidentRow){
	return accidentRow;
    });
}

async function getAccidentWeatherStation(station_id) {
    //var accidents = [];
    //await findClosestAccidents(station_id);
    await $.getJSON("/api/findClosestAccidents", {station_id}, function(accidents){
	console.log(accidents);
        for(let i = 0; i < accidents.length; i++){
	    var temp = accidents[i].CreationTime;
	    $.getJSON("/api/getAccidentWeatherStation", {temp, station_id}, function(accidentWeatherRow){
		for(let j = 0; j < accidentWeatherRow.length; j++
		    datamultieplegrafaccidentcorrelation(accidentWeatherRow[j], station_id);
	        }
	    });
        }
    });
}

async function findClosestAccidents(station_id) {
    await $.getJSON("/api/findClosestAccidents", {station_id}, function(result){
	 accidents = result;
    });
}

function writeLog(obj){
    const fs = require('fs');
    fs.writeFile("/bin/d0020e/Digital-Vinter/app/public/javascripts/graph/log.txt", JSON.stringify(obj), function(err) {
	if(err) {
            return console.log(err);
    	}

    	console.log("The file was saved!");
    }); 
}
